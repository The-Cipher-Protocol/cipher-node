package reward

import (
	"fmt"

	"github.com/The-Cipher-Protocol/cipher-node/chain"
	"github.com/The-Cipher-Protocol/cipher-node/types"
	"github.com/The-Cipher-Protocol/cipher-node/utils/helper/common"
	"github.com/The-Cipher-Protocol/cipher-node/utils/helper/hex"
)

var (
	DefaultRewardContractBalance = "0x18D0BF423C03D8DE000000" // Balance to pre-fund the reward contract
	RewardContractAddress        = types.StringToAddress("0x000000000000000000000000000000000000FFf1")
	//nolint: lll
	RewardContractBytecode = "0x60806040526004361061007f5760003560e01c8063bafedcaa1161004e578063bafedcaa146101d0578063cd74234e146101fb578063f8077fae14610226578063fe18818414610251576100d4565b80631ec8bb8c1461012457806348b92fd31461014d5780638b9805d41461017a578063b7bd5b37146101a5576100d4565b366100d4573373ffffffffffffffffffffffffffffffffffffffff167fbb527541f6cc244ae00ab689f8c23d072a30a3b4176021df62ea1c2bac8aa226346040516100ca9190610846565b60405180910390a2005b3373ffffffffffffffffffffffffffffffffffffffff167fbb527541f6cc244ae00ab689f8c23d072a30a3b4176021df62ea1c2bac8aa2263460405161011a9190610846565b60405180910390a2005b34801561013057600080fd5b5061014b6004803603810190610146919061060f565b61027c565b005b34801561015957600080fd5b50610162610557565b6040516101719392919061076f565b60405180910390f35b34801561018657600080fd5b5061018f610590565b60405161019c9190610754565b60405180910390f35b3480156101b157600080fd5b506101ba6105a5565b6040516101c79190610846565b60405180910390f35b3480156101dc57600080fd5b506101e56105ab565b6040516101f29190610846565b60405180910390f35b34801561020757600080fd5b506102106105b1565b60405161021d9190610846565b60405180910390f35b34801561023257600080fd5b5061023b6105b9565b6040516102489190610846565b60405180910390f35b34801561025d57600080fd5b506102666105bf565b6040516102739190610754565b60405180910390f35b70fe0b5d325ae36f04667b75a22e29b94a0873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f290610806565b60405180910390fd5b6000811161033e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610335906107a6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a590610826565b60405180910390fd5b804710156103f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e8906107e6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516104179061073f565b60006040518083038185875af1925050503d8060008114610454576040519150601f19603f3d011682016040523d82523d6000602084013e610459565b606091505b505090508061049d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610494906107c6565b60405180910390fd5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555042600381905550816000808282546104fd919061087d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea68360405161054a9190610846565b60405180910390a2505050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600254600354925092509250909192565b70fe0b5d325ae36f04667b75a22e29b94a0881565b60005481565b60025481565b600047905090565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506105f481610a39565b92915050565b60008135905061060981610a50565b92915050565b600080604083850312156106265761062561093e565b5b6000610634858286016105e5565b9250506020610645858286016105fa565b9150509250929050565b610658816108d3565b82525050565b600061066b60128361086c565b915061067682610943565b602082019050919050565b600061068e600f8361086c565b91506106998261096c565b602082019050919050565b60006106b160148361086c565b91506106bc82610995565b602082019050919050565b60006106d460218361086c565b91506106df826109be565b604082019050919050565b60006106f760118361086c565b915061070282610a0d565b602082019050919050565b600061071a600083610861565b915061072582610a36565b600082019050919050565b61073981610905565b82525050565b600061074a8261070d565b9150819050919050565b6000602082019050610769600083018461064f565b92915050565b6000606082019050610784600083018661064f565b6107916020830185610730565b61079e6040830184610730565b949350505050565b600060208201905081810360008301526107bf8161065e565b9050919050565b600060208201905081810360008301526107df81610681565b9050919050565b600060208201905081810360008301526107ff816106a4565b9050919050565b6000602082019050818103600083015261081f816106c7565b9050919050565b6000602082019050818103600083015261083f816106ea565b9050919050565b600060208201905061085b6000830184610730565b92915050565b600081905092915050565b600082825260208201905092915050565b600061088882610905565b915061089383610905565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108c8576108c761090f565b5b828201905092915050565b60006108de826108e5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f526577617264206d757374206265203e20300000000000000000000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b7f4e6f7420617574686f72697a65643a204f6e6c792073797374656d43616c6c6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420726563697069656e74000000000000000000000000000000600082015250565b50565b610a42816108d3565b8114610a4d57600080fd5b50565b610a5981610905565b8114610a6457600080fd5b5056fea26469706673582212207d94f3ac308ce6c1cce8f7ba2cb24a9b5ea1ce574895afc0f4dba5f21f9aee4d64736f6c63430008070033" // Truncated for brevity
)

// PredeployRewardContract predeploys the reward contract in the genesis block
func PredeployRewardContract() (*chain.GenesisAccount, error) {
	// Decode the bytecode
	scHex, err := hex.DecodeHex(RewardContractBytecode)
	if err != nil {
		return nil, fmt.Errorf("unable to decode reward contract bytecode: %w", err)
	}

	// Parse the default balance into a *big.Int
	bigDefaultBalance, err := common.ParseUint256orHex(&DefaultRewardContractBalance)
	if err != nil {
		return nil, fmt.Errorf("unable to parse reward contract balance: %w", err)
	}

	// Create the genesis account for the reward contract
	rewardAccount := &chain.GenesisAccount{
		Code:    scHex,
		Balance: bigDefaultBalance,
	}

	// Return the pre-configured reward contract account
	return rewardAccount, nil
}
